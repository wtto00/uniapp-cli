#! /usr/bin/env node
const { Argument } = require('commander');
const { Command } = require('commander');
const { program } = require('commander');

program
  .name('uniapp')
  .version(`uniapp-cli @${require('../package').version}`)
  .usage('<command> [options]')
  .option('-d, --verbose', 'debug mode produces verbose log output for all activity')
  .allowUnknownOption(true)
  .showHelpAfterError(true)
  .showSuggestionAfterError(true);

process.uniapp = program.opts();

program
  .command('create')
  .usage('<app-name>')
  .summary('Create a new project')
  .description('create a new project powered by uniapp-cli')
  .argument('<app-name>', 'Human readable name')
  .option('-t, --template <template>', 'use a custom template from GitHub/GitLab/Bitbucket/Git:url.')
  .option('-f, --force', 'Overwrite target directory if it exists.')
  .addHelpText('after', '\nExample:\n  uniapp create MyUniApp')
  .action((appName, options) => {
    require('../src/create.js')(appName, options);
  });

program
  .command('requirements')
  .usage('[platform ...]')
  .summary('Checks and print out all the requirements for platforms specified.')
  .description(
    'Checks and print out all the requirements for platforms specified (or all platforms added to project if none specified). If all requirements for each platform are met, exits with code 0 otherwise exits with non-zero code.',
  )
  .argument('[platform...]', 'Platforms requirements you want to check.')
  .addHelpText('after', '\nExample:\n  uniapp requirements android')
  .action((platform) => {
    require('../src/requirements.js')(platform);
  });

const platform = program
  .command('platform')
  .usage('<command> [options]')
  .summary('Manage project platforms.')
  .description('Manage project platforms.');

platform
  .command('add')
  .usage('<plat-spec...>')
  .summary('Add specified platforms and install them.')
  .description('Add specified platforms and install them.')
  .argument('<plat-spec...>', 'Specified platforms')
  .action((pfm) => {
    require('../src/platform.js').add(pfm);
  });
platform
  .command('rm')
  .alias('remove')
  .usage('<platform...>')
  .summary('Remove specified platforms.')
  .description('Remove specified platforms.')
  .argument('<platform...>', 'Specified platforms')
  .action((pfm) => {
    require('../src/platform.js').rm(pfm);
  });
platform
  .command('ls')
  .alias('list')
  .summary('List all installed and available platforms.')
  .description('List all installed and available platforms.')
  .action(() => {
    require('../src/platform.js').ls();
  });

program.parse(process.argv);
